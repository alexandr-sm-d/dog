[{"D:\\dev\\redux-saga\\dog\\src\\index.js":"1","D:\\dev\\redux-saga\\dog\\src\\reportWebVitals.js":"2","D:\\dev\\redux-saga\\dog\\src\\components\\App.js":"3","D:\\dev\\redux-saga\\dog\\src\\components\\Info.jsx":"4","D:\\dev\\redux-saga\\dog\\src\\store\\store.js":"5","D:\\dev\\redux-saga\\dog\\src\\store\\reducer.js":"6","D:\\dev\\redux-saga\\dog\\src\\store\\rootSaga.js":"7"},{"size":596,"mtime":1608124454773,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":1293,"mtime":1608313515442,"results":"11","hashOfConfig":"9"},{"size":697,"mtime":1608124454813,"results":"12","hashOfConfig":"9"},{"size":654,"mtime":1608460523955,"results":"13","hashOfConfig":"9"},{"size":2535,"mtime":1608460523995,"results":"14","hashOfConfig":"9"},{"size":183,"mtime":1608124778262,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"wqemlh",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"D:\\dev\\redux-saga\\dog\\src\\index.js",[],["32","33"],"D:\\dev\\redux-saga\\dog\\src\\reportWebVitals.js",[],"D:\\dev\\redux-saga\\dog\\src\\components\\App.js",[],"D:\\dev\\redux-saga\\dog\\src\\components\\Info.jsx",[],"D:\\dev\\redux-saga\\dog\\src\\store\\store.js",[],"D:\\dev\\redux-saga\\dog\\src\\store\\reducer.js",["34","35"],"import * as axios from 'axios';\r\nimport {put, all, call, takeEvery} from 'redux-saga/effects'\r\nimport {takeLatest} from \"@redux-saga/core/effects\";\r\nimport {createAction, createAsyncAction, createReducer, getType} from \"typesafe-actions\";\r\n\r\nconst IS_LOADING = 'IS_LOADING'\r\nconst FETCH_SUCCESS = 'FETCH_SUCCESS'\r\nconst FETCH_FAILED = 'FETCH_FAILED'\r\nconst UPDATE_VERSION = 'UPDATE_VERSION'\r\nconst SHOW_AUTHOR = 'SHOW_AUTHOR'\r\n\r\nconst URL = 'https://dog.ceo/api/breeds/image/random'\r\nlet initialState = {\r\n    url: '',\r\n    isLoading: false,\r\n    errorLoading: false,\r\n    info: {title: 1},\r\n    author: ''\r\n}\r\n\r\nconst fetchDogImage = createAsyncAction(\r\n    [IS_LOADING], // {type: IS_LOADING}\r\n    [FETCH_SUCCESS, (img: string, info: string) => ({img, info})], // {type: FETCH_SUCCESS, img}\r\n    [FETCH_FAILED] // {type: FETCH_FAILED}\r\n)()\r\n\r\nexport const updateVersionTA = createAction(UPDATE_VERSION)() //..TA = use typesafe-action\r\nexport const showAuthorTA = createAction(SHOW_AUTHOR, (payload: string) => payload)()\r\n\r\n\r\nexport const fetchReducerTA = createReducer(initialState, {\r\n    [getType(fetchDogImage.request)]: state => ({\r\n        ...state,\r\n        isLoading: true\r\n    }),\r\n    [getType(fetchDogImage.success)]: (state, {payload}) => ({\r\n        ...state,\r\n        isLoading: false,\r\n        url: payload.img // TA\r\n\r\n    }),\r\n    [getType(fetchDogImage.failure)]: state => ({\r\n        ...state,\r\n        isLoading: false,\r\n        errorLoading: true\r\n    }),\r\n    [getType(updateVersionTA)]: state => ({\r\n        ...state,\r\n        info: {\r\n            ...state.info,\r\n            title: state.info.title + 1\r\n        }\r\n    }),\r\n    [getType(showAuthorTA)]: (state, {payload}) => ({\r\n        ...state,\r\n        author: payload\r\n    })\r\n})\r\n\r\nconst delay = (ms) => new Promise(res => setTimeout(res, ms))\r\n\r\nfunction* fetchHandlerTA() {\r\n    try {\r\n        yield put(fetchDogImage.request())\r\n        yield delay(1000)\r\n        let img = yield call(() => axios.get(URL).then(response => response.data.message))\r\n        yield put(fetchDogImage.success(img, 'some info'))\r\n    } catch (err) {\r\n        yield put(fetchDogImage.failure())\r\n    }\r\n}\r\n\r\nexport function* watchFetchHandler() {\r\n    // yield takeEvery('FETCH_ASYNC', fetchHandler)\r\n    yield takeLatest('FETCH_ASYNC', fetchHandlerTA)\r\n}\r\n","D:\\dev\\redux-saga\\dog\\src\\store\\rootSaga.js",[],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":2,"column":14,"nodeType":"42","messageId":"43","endLine":2,"endColumn":17},{"ruleId":"40","severity":1,"message":"44","line":2,"column":25,"nodeType":"42","messageId":"43","endLine":2,"endColumn":34},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'all' is defined but never used.","Identifier","unusedVar","'takeEvery' is defined but never used.","no-global-assign","no-unsafe-negation"]